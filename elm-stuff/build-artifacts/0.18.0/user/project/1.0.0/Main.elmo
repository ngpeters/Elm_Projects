var _user$project$Main$winBox = _evancz$elm_graphics$Collage$group(
	{
		ctor: '::',
		_0: A2(
			_evancz$elm_graphics$Collage$filled,
			_elm_lang$core$Color$yellow,
			A2(_evancz$elm_graphics$Collage$rect, 300, 100)),
		_1: {
			ctor: '::',
			_0: _evancz$elm_graphics$Collage$text(
				A2(
					_evancz$elm_graphics$Text$height,
					40,
					_evancz$elm_graphics$Text$fromString('You Win'))),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$backDropBox = function (color) {
	return _evancz$elm_graphics$Collage$group(
		{
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$filled,
				color,
				_evancz$elm_graphics$Collage$square(600)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$drawCircle = function (model) {
	return A2(
		_evancz$elm_graphics$Collage$move,
		{ctor: '_Tuple2', _0: model.x, _1: model.y},
		_evancz$elm_graphics$Collage$group(
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$filled,
					model.dropColor,
					_evancz$elm_graphics$Collage$circle(35)),
				_1: {
					ctor: '::',
					_0: _evancz$elm_graphics$Collage$text(
						_evancz$elm_graphics$Text$fromString(model.name)),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$drawSinglePoint = function (pointColor) {
	return A2(
		_evancz$elm_graphics$Collage$move,
		{ctor: '_Tuple2', _0: 310, _1: pointColor.y},
		_evancz$elm_graphics$Collage$group(
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$filled,
					pointColor.pColor,
					A2(_evancz$elm_graphics$Collage$rect, 30, 10)),
				_1: {ctor: '[]'}
			}));
};
var _user$project$Main$drawPointsBox = A2(
	_evancz$elm_graphics$Collage$move,
	{ctor: '_Tuple2', _0: 310, _1: -35},
	_evancz$elm_graphics$Collage$group(
		{
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$filled,
				A3(
					_elm_lang$core$Color$hsl,
					_elm_lang$core$Basics$degrees(256),
					0.61,
					0.5),
				A2(_evancz$elm_graphics$Collage$rect, 30, 530)),
			_1: {ctor: '[]'}
		}));
var _user$project$Main$checkIfWon = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.points, 53) ? _elm_lang$core$Native_Utils.update(
		model,
		{
			youWon: true,
			isPlaying: false,
			droplist: {ctor: '[]'}
		}) : model;
};
var _user$project$Main$deleteExtraPoints = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			pointsColor: A2(_elm_lang$core$List$take, model.points, model.pointsColor)
		});
};
var _user$project$Main$deleteDropsOffPage = function (drop) {
	return _elm_lang$core$Native_Utils.cmp(drop.y, -350) > 0;
};
var _user$project$Main$deleteDrops = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			droplist: A2(_elm_lang$core$List$filter, _user$project$Main$deleteDropsOffPage, model.droplist)
		});
};
var _user$project$Main$fall = function (drop) {
	return _elm_lang$core$Native_Utils.update(
		drop,
		{y: drop.y - 1.0});
};
var _user$project$Main$updateDrops = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			droplist: A2(_elm_lang$core$List$map, _user$project$Main$fall, model.droplist)
		});
};
var _user$project$Main$isRightColor = F2(
	function (singleDrop, clickedDrop) {
		return _elm_lang$core$Native_Utils.eq(singleDrop, clickedDrop.dropColorIndex);
	});
var _user$project$Main$deletClickedDrops = F2(
	function (model, drop) {
		return !((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(
				_elm_lang$core$Basics$toFloat(model.mPositionX) - drop.x),
			35) < 0) && ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(
				_elm_lang$core$Basics$toFloat(model.mPositionY) - drop.y),
			35) < 0) && A2(_user$project$Main$isRightColor, model.singleCircle, drop)));
	});
var _user$project$Main$onlyUpdateIf = F2(
	function (tick, model) {
		return model.isPlaying ? tick(model) : model;
	});
var _user$project$Main$pointColors = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: A3(
			_elm_lang$core$Color$hsl,
			_elm_lang$core$Basics$degrees(171),
			0.86,
			0.42),
		_1: {
			ctor: '::',
			_0: A3(
				_elm_lang$core$Color$hsl,
				_elm_lang$core$Basics$degrees(157),
				0.86,
				0.47),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$core$Color$hsl,
					_elm_lang$core$Basics$degrees(131),
					0.43,
					0.47),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$core$Color$hsl,
						_elm_lang$core$Basics$degrees(195),
						0.7,
						0.51),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$core$Color$hsl,
							_elm_lang$core$Basics$degrees(208),
							0.68,
							0.51),
						_1: {
							ctor: '::',
							_0: A3(
								_elm_lang$core$Color$hsl,
								_elm_lang$core$Basics$degrees(278),
								0.55,
								0.66),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Main$getPointColor = function (i) {
	var _p0 = A2(_elm_lang$core$Array$get, i, _user$project$Main$pointColors);
	if (_p0.ctor === 'Just') {
		return _p0._0;
	} else {
		return _elm_lang$core$Color$black;
	}
};
var _user$project$Main$addUpPoints = F3(
	function (pointsCount, yOffset, model) {
		addUpPoints:
		while (true) {
			var _p1 = pointsCount;
			if (_p1 === 0) {
				return model;
			} else {
				var _v2 = pointsCount - 1,
					_v3 = yOffset + 10,
					_v4 = _elm_lang$core$Native_Utils.update(
					model,
					{
						pointsColor: {
							ctor: '::',
							_0: {
								y: yOffset,
								pColor: _user$project$Main$getPointColor(model.arrayPosition),
								pointIndex: model.points
							},
							_1: model.pointsColor
						},
						arrayPosition: A2(
							_elm_lang$core$Basics_ops['%'],
							model.arrayPosition + 1,
							_elm_lang$core$Array$length(_user$project$Main$pointColors))
					});
				pointsCount = _v2;
				yOffset = _v3;
				model = _v4;
				continue addUpPoints;
			}
		}
	});
var _user$project$Main$updatePointsCounter = function (model) {
	return A3(_user$project$Main$addUpPoints, model.points, -295.0, model);
};
var _user$project$Main$checkPosition = function (model) {
	return _user$project$Main$updatePointsCounter(
		_elm_lang$core$Native_Utils.update(
			model,
			{
				droplist: A2(
					_elm_lang$core$List$filter,
					_user$project$Main$deletClickedDrops(model),
					model.droplist),
				points: A2(
					_elm_lang$core$List$all,
					_user$project$Main$deletClickedDrops(model),
					model.droplist) ? model.points : (model.points + 1)
			}));
};
var _user$project$Main$colors = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: A3(
			_elm_lang$core$Color$hsl,
			_elm_lang$core$Basics$degrees(190),
			0.77,
			0.5),
		_1: {
			ctor: '::',
			_0: A3(
				_elm_lang$core$Color$hsl,
				_elm_lang$core$Basics$degrees(121),
				0.74,
				0.5),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$core$Color$hsl,
					_elm_lang$core$Basics$degrees(41),
					0.9,
					0.5),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$core$Color$hsl,
						_elm_lang$core$Basics$degrees(16),
						0.82,
						0.5),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$core$Color$hsl,
							_elm_lang$core$Basics$degrees(337),
							0.88,
							0.77),
						_1: {
							ctor: '::',
							_0: A3(
								_elm_lang$core$Color$hsl,
								_elm_lang$core$Basics$degrees(285),
								0.57,
								0.5),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Color$yellow,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Color$white,
									_1: {
										ctor: '::',
										_0: A3(
											_elm_lang$core$Color$hsl,
											_elm_lang$core$Basics$degrees(0),
											0,
											0.5),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Color$brown,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$getColor = function (i) {
	var _p2 = A2(_elm_lang$core$Array$get, i, _user$project$Main$colors);
	if (_p2.ctor === 'Just') {
		return _p2._0;
	} else {
		return _elm_lang$core$Color$red;
	}
};
var _user$project$Main$names2 = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: 'あお',
		_1: {
			ctor: '::',
			_0: 'みどり',
			_1: {
				ctor: '::',
				_0: 'だいだいいろ',
				_1: {
					ctor: '::',
					_0: 'あか',
					_1: {
						ctor: '::',
						_0: 'ももいろ',
						_1: {
							ctor: '::',
							_0: 'むらさき',
							_1: {
								ctor: '::',
								_0: 'きいろ',
								_1: {
									ctor: '::',
									_0: 'しろ',
									_1: {
										ctor: '::',
										_0: 'はいいろ',
										_1: {
											ctor: '::',
											_0: 'ちゃいろ',
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$getName3 = function (i) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(_elm_lang$core$Array$get, i, _user$project$Main$names2));
};
var _user$project$Main$names = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: 'blue',
		_1: {
			ctor: '::',
			_0: 'green',
			_1: {
				ctor: '::',
				_0: 'orange',
				_1: {
					ctor: '::',
					_0: 'red',
					_1: {
						ctor: '::',
						_0: 'pink',
						_1: {
							ctor: '::',
							_0: 'purple',
							_1: {
								ctor: '::',
								_0: 'yello',
								_1: {
									ctor: '::',
									_0: 'white',
									_1: {
										ctor: '::',
										_0: 'gray',
										_1: {
											ctor: '::',
											_0: 'brown',
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$getName = function (position) {
	var _p3 = A2(_elm_lang$core$Array$get, position, _user$project$Main$names);
	if (_p3.ctor === 'Just') {
		return _p3._0;
	} else {
		return 'No';
	}
};
var _user$project$Main$getName1 = function (i) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(_elm_lang$core$Array$get, i, _user$project$Main$names));
};
var _user$project$Main$names1 = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: '青',
		_1: {
			ctor: '::',
			_0: '緑',
			_1: {
				ctor: '::',
				_0: '橙色',
				_1: {
					ctor: '::',
					_0: '赤',
					_1: {
						ctor: '::',
						_0: '桃色',
						_1: {
							ctor: '::',
							_0: '紫',
							_1: {
								ctor: '::',
								_0: '黄色',
								_1: {
									ctor: '::',
									_0: '白',
									_1: {
										ctor: '::',
										_0: '灰色',
										_1: {
											ctor: '::',
											_0: '茶色',
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$createMoreCircles = F3(
	function (numC, xOffset, model) {
		createMoreCircles:
		while (true) {
			var _p4 = numC;
			if (_p4 === 0) {
				return model;
			} else {
				var _p5 = A2(
					_elm_lang$core$Random$step,
					A2(
						_elm_lang$core$Random$int,
						0,
						_elm_lang$core$Array$length(_user$project$Main$names1) - 1),
					model.seed);
				var randomValue = _p5._0;
				var newSeed = _p5._1;
				var _v8 = numC - 1,
					_v9 = xOffset + 100,
					_v10 = _elm_lang$core$Native_Utils.update(
					model,
					{
						seed: newSeed,
						droplist: {
							ctor: '::',
							_0: {
								x: xOffset,
								y: 350.0,
								name: _user$project$Main$getName3(randomValue),
								dropColor: _user$project$Main$getColor(randomValue),
								dropColorIndex: randomValue
							},
							_1: model.droplist
						}
					});
				numC = _v8;
				xOffset = _v9;
				model = _v10;
				continue createMoreCircles;
			}
		}
	});
var _user$project$Main$createCircle = function (model) {
	return A3(_user$project$Main$createMoreCircles, 5, -200.0, model);
};
var _user$project$Main$addCircles = function (model) {
	return A3(_user$project$Main$createMoreCircles, 5, -200.0, model);
};
var _user$project$Main$updateTime = function (model) {
	var _p6 = model.time;
	if (_p6 === 100) {
		return _user$project$Main$addCircles(
			_elm_lang$core$Native_Utils.update(
				model,
				{time: 0}));
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{time: model.time + 1});
	}
};
var _user$project$Main$getName2 = function (i) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(_elm_lang$core$Array$get, i, _user$project$Main$names1));
};
var _user$project$Main$drawRect = function (model) {
	return A2(
		_evancz$elm_graphics$Collage$move,
		{ctor: '_Tuple2', _0: 305.0, _1: 270.0},
		_evancz$elm_graphics$Collage$group(
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$filled,
					_elm_lang$core$Color$black,
					A2(_evancz$elm_graphics$Collage$rect, 85, 60)),
				_1: {
					ctor: '::',
					_0: _evancz$elm_graphics$Collage$text(
						A2(
							_evancz$elm_graphics$Text$height,
							20,
							A2(
								_evancz$elm_graphics$Text$color,
								_elm_lang$core$Color$white,
								_evancz$elm_graphics$Text$fromString(
									_user$project$Main$getName2(model.singleCircle))))),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$drawCanvas = function (model) {
	return _evancz$elm_graphics$Element$toHtml(
		A3(
			_evancz$elm_graphics$Collage$collage,
			700,
			600,
			_elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _user$project$Main$backDropBox(_elm_lang$core$Color$blue),
						_1: {
							ctor: '::',
							_0: _user$project$Main$drawPointsBox,
							_1: {
								ctor: '::',
								_0: _user$project$Main$drawRect(model),
								_1: {ctor: '[]'}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$List$map, _user$project$Main$drawCircle, model.droplist),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$List$map, _user$project$Main$drawSinglePoint, model.pointsColor),
							_1: {
								ctor: '::',
								_0: model.youWon ? {
									ctor: '::',
									_0: _user$project$Main$winBox,
									_1: {ctor: '[]'}
								} : {ctor: '[]'},
								_1: {ctor: '[]'}
							}
						}
					}
				})));
};
var _user$project$Main$createSingleCircleHelper = function (model) {
	var _p7 = A2(
		_elm_lang$core$Random$step,
		A2(
			_elm_lang$core$Random$int,
			0,
			_elm_lang$core$Array$length(_user$project$Main$names1) - 1),
		model.seed);
	var randomValue = _p7._0;
	var newSeed = _p7._1;
	return _elm_lang$core$Native_Utils.update(
		model,
		{seed: newSeed, singleCircle: randomValue});
};
var _user$project$Main$updateSingleCircle = function (model) {
	var _p8 = model.singleCircleTime;
	switch (_p8) {
		case 150:
			return _elm_lang$core$Native_Utils.update(
				model,
				{singleCircleTime: 0});
		case 1:
			return _user$project$Main$createSingleCircleHelper(
				_elm_lang$core$Native_Utils.update(
					model,
					{singleCircleTime: model.singleCircleTime + 1}));
		default:
			return _elm_lang$core$Native_Utils.update(
				model,
				{singleCircleTime: model.singleCircleTime + 1});
	}
};
var _user$project$Main$tick = function (model) {
	return _user$project$Main$checkIfWon(
		_user$project$Main$deleteExtraPoints(
			_user$project$Main$deleteDrops(
				_user$project$Main$updateTime(
					_user$project$Main$updateDrops(
						_user$project$Main$updateSingleCircle(model))))));
};
var _user$project$Main$initialModel = {
	droplist: {ctor: '[]'},
	time: 0,
	singleCircleTime: 0,
	seed: _elm_lang$core$Random$initialSeed(0),
	singleCircle: 0,
	mPositionX: 0,
	mPositionY: 0,
	arrayPosition: 0,
	points: 0,
	pointsColor: {ctor: '[]'},
	isPlaying: false,
	youWon: false
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'Begin':
				return _user$project$Main$createCircle(
					_elm_lang$core$Native_Utils.update(
						_user$project$Main$initialModel,
						{isPlaying: true}));
			case 'Tick':
				return A2(_user$project$Main$onlyUpdateIf, _user$project$Main$tick, model);
			case 'InitialSeed':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						seed: _elm_lang$core$Random$initialSeed(_p9._0)
					});
			default:
				var _p10 = _p9._0;
				return _user$project$Main$checkPosition(
					_elm_lang$core$Native_Utils.update(
						model,
						{mPositionX: _p10.x - 350, mPositionY: (-1 * _p10.y) + 300}));
		}
	});
var _user$project$Main$updateWithCommand = F2(
	function (msg, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Main$update, msg, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {droplist: a, time: b, singleCircleTime: c, seed: d, singleCircle: e, mPositionX: f, mPositionY: g, arrayPosition: h, points: i, pointsColor: j, isPlaying: k, youWon: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Drop = F5(
	function (a, b, c, d, e) {
		return {x: a, y: b, name: c, dropColor: d, dropColorIndex: e};
	});
var _user$project$Main$PointsC = F3(
	function (a, b, c) {
		return {y: a, pColor: b, pointIndex: c};
	});
var _user$project$Main$MouseMsg = function (a) {
	return {ctor: 'MouseMsg', _0: a};
};
var _user$project$Main$InitialSeed = function (a) {
	return {ctor: 'InitialSeed', _0: a};
};
var _user$project$Main$generateInitialSeed = A2(
	_elm_lang$core$Random$generate,
	_user$project$Main$InitialSeed,
	A2(_elm_lang$core$Random$int, _elm_lang$core$Random$minInt, _elm_lang$core$Random$maxInt));
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$clicks(_user$project$Main$MouseMsg),
			_1: {
				ctor: '::',
				_0: _elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Main$Tick),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$Begin = {ctor: 'Begin'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$drawCanvas(model),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Begin),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Begin'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(' Rules: Click on the circle that matches the text in the upper right corner.'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(' If you get 53 points, you win and the game will clear.'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _user$project$Main$generateInitialSeed},
		view: _user$project$Main$view,
		subscriptions: _user$project$Main$subscriptions,
		update: _user$project$Main$updateWithCommand
	})();
